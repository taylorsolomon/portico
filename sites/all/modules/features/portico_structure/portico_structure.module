<?php
/**
 * @file
 * Code for the Portico Structure feature.
 */

include_once 'portico_structure.features.inc';
include_once 'includes/portico_structure.block.inc';
include_once 'includes/portico_structure.admin.inc';

function portico_structure_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  $paths ['user']   = TRUE;
  $paths ['user/*'] = TRUE;
}

/**
 * Implements hook_menu().
 */
function portico_structure_menu() {

  $items['admin/content/portico'] = array(
    'title' => t('Portico'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('portico_config'),
    'access arguments' => array('administer configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/portico-now'] = array(
    'title' => t('PorticoNOW'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('portico_now_table'),
    'access arguments' => array('administer configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['sermon/autocomplete'] = array(
    'title' => 'Autocomplete for sermons',
    'page callback' => '_sermons_autocomplete',
    'access arguments' => array('administer configuration'),
    'type' => MENU_CALLBACK
  );

  $items['sermon-feed'] = array(
    'title' => 'Portico Arlington Podcast Feed',
    'page callback' => 'portico_feed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * [portico_structure_theme description]
 * @return [type] [description]
 */
function portico_structure_theme() {
  return array(
    'portico_now_table' => array(
      'render element' => 'form',
      'file' => 'includes/portico_structure.admin.inc',
    ),
  );
}

/**
 * [portico_structure_subtype_options description]
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function portico_structure_subtype_options(&$form, &$form_state) {
  switch($form_state['bundle']) {
    case 'page' :
      $options = array(
        'sermons' => t('Sermons'),
        'leadership' => t('Leadership'),
        'evening' => t('[Evening] Sunday Evening Service'),
        'evening_sermons' => t('[Evening] Sermons'),
      );
      break;
  }

  drupal_alter('subtype_options', $options, $form_state);

  return $options;
}


/**
 * [portico_structure_service_options description]
 * @param  [type] $form
 * @param  [type] $form_state
 * @return [type]
 */
function portico_structure_service_options(&$form, &$form_state) {
  $options = array(
    'morning' => t('Morning'),
    'evening' => t('Evening')
  );
  return $options;
}

/**
 * Helper function that returns first node that meets the subtype argument.
 *
 * @param  string $subtype
 * @param  string $bundle
 * @return node object
 */
function portico_structure_get_subtype($subtype, $bundle = NULL) {
  if (empty($subtype)) {
    return FALSE;
  }
  // Now check for bundle, if empty set as landing.
  if (empty($bundle)) {
    $bundle = 'page';
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundle)
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_subtype', 'value', $subtype, '=')
      ->addTag('portico_structure_get_subtype');

  $result = $efq->execute();

  if (empty($result['node'])) {
    return FALSE;
  }

  $result_node = reset($result['node']);
  $node = node_load($result_node->nid);
  return $node;
}

/**
 * Featured Sermon autocomplete
 * @param  [type] $string [description]
 * @return [type]         [description]
 */
function _sermons_autocomplete($string) {
  $matches = array();
  $result = db_select('node', 'n')
    ->condition('type', 'sermon')
    ->fields('n', array('title', 'nid'))
    ->condition('title', '%' . db_like($string) . '%', 'LIKE')
    ->execute();

  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->title . ' [' . $row->nid . ']'] = check_plain($row->title) ;
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
 * [portico_structure_preprocess_entity description]
 * @param  [type] &$variables [description]
 * @param  [type] $hook       [description]
 * @return [type]             [description]
 */
function portico_structure_preprocess_entity(&$variables, $hook) {
  $function = __FUNCTION__ . '_' . $variables['entity_type'];
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}

/**
 * [portico_structure_field_widget_form_alter description]
 * @param  [type] $element
 * @param  [type] $form_state
 * @param  [type] $context
 * @return [type]
 */
 function portico_structure_field_widget_form_alter(&$element, &$form_state, $context) {
   if ($element['#field_name'] == 'field_series') {
     foreach ($element['#options'] as $tid => &$title) {
       if ($tid == "_none") { continue; }
       $term = taxonomy_term_load($tid);
       if (!empty($term->field_service)) {
         $title = '[' . ucwords($term->field_service['und'][0]['value']) . '] ' . $title;
       } else {
         $title = '[Morning] ' . $title;
       }
     }

     asort($element['#options']);
   }
 }

/**
 * [portico_structure_preprocess_entity_paragraphs_item description]
 * @param  [type] &$vars [description]
 * @return [type]        [description]
 */
function portico_structure_preprocess_entity_paragraphs_item(&$vars) {
  // Reset all classes on paragraph items.
  $vars['classes_array'] = array(
    'paragraphs-item-' . drupal_html_class($vars['elements']['#bundle'])
  );

  switch ($vars['elements']['#bundle']) {

    case 'grid':

      if (empty($vars['paragraphs_item']->field_columns)) {
        return $vars;
      }
      $vars['classes_array'][] = 'columns-' .
        $vars['paragraphs_item']->field_columns['und'][0]['value'];
      break;
  }
}

/**
 * [portico_structure_preprocess_paragraphs_items description]
 * @param  [type] &$variables [description]
 * @return [type]             [description]
 */
function portico_structure_preprocess_paragraphs_items(&$variables) {
  $element = $variables['element'];
  $variables['classes_array'] = array(
    'wrapper-' . drupal_html_class($element['#field_name'])
  );
}

/**
 * Implementation of hook_entity_view_alter().
 */
function portico_structure_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#bundle'] == 'page') {
    if ($subtype = field_get_items('node', $build['#node'], 'field_subtype')) {

      switch($subtype[0]['value']) {
        case 'sermons':
          portico_structure_add_sermons($build);
          break;

        case 'evening_sermons':
          portico_structure_add_sermons($build, 'evening');
          break;

        case 'leadership':
          portico_structure_add_leadership($build);
          break;
      }
    }
  }
}

/**
 * [portico_structure_add_sermons description]
 * @param  [type] &$build [description]
 * @return [type]         [description]
 */
function portico_structure_add_sermons(&$build, $service = 'morning') {

  $nodes = portico_structure_get_sermons(TRUE, $service);
  $viewed = _split_and_view_by_series($nodes);
  // $viewed = entity_view('node', $nodes, 'teaser');
  unset($viewed['node']['#sorted']);
  $build['sermons'] = $viewed;
  $build['pager'] = array(
    '#markup' => theme('pager'),
    '#weight' => 10,
  );
}

/**
 * [portico_structure_add_sermons description]
 * @param  [type] &$build [description]
 * @return [type]         [description]
 */
function portico_structure_add_leadership(&$build) {

  $q = new EntityFieldQuery;
  $q->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->addTag('portico_structure_leadership');

  $r = $q->execute();

  if (empty($r['node'])) {
    return FALSE;
  }

  $nodes = entity_load('node', array_keys($r['node']));

  $viewed = entity_view('node', $nodes, 'teaser');

  $build['leaders'] = array(
    '#prefix' => '<div class=\'leadership-wrapper\'>',
    '#suffix' => '</div>',

    'pastor-elder' => array(
      '#prefix' => '<div class=\'leadership-type\'>',
      'title' => array('#markup' => '<h2 class=\'leadership-title\'>' . t('Pastors and Elders') . '</h2>'),
      '#suffix' => '</div>',
      'people' => array(),
    ),

    'deacon' => array(
      '#prefix' => '<div class=\'leadership-type\'>',
      'title' => array('#markup' => '<h2 class=\'leadership-title\'>' . t('Deacons') . '</h2>'),
      '#suffix' => '</div>',
      'people' => array(),
    ),

    'staff' => array(
      '#prefix' => '<div class=\'leadership-type\'>',
      'title' => array('#markup' => '<h2 class=\'leadership-title\'>' . t('Staff') . '</h2>'),
      '#suffix' => '</div>',
      'people' => array(),
    ),

  );

  // Assign weight, and divy people up by type
  foreach ($nodes as $node) {

    $type = field_get_items('node', $node, 'field_type');
    $type = reset($type);

    $weight = field_get_items('node', $node, 'field_weight');
    $weight = reset($weight);

    $viewed['node'][$node->nid]['#weight'] = $weight['value'];

    $build['leaders'][$type['value']]['people'][] = $viewed['node'][$node->nid];

  }

  // Get rid of unneeded areas if there are any.
  // Also, sort results by field_weight
  foreach ($build['leaders'] as $key => $value) {
    if (!is_array($value)) {
      continue;
    }
    if (empty($value['people'])) {
      unset($build['leaders'][$key]);
      continue;
    }

    uasort($build['leaders'][$key]['people'], 'element_sort');
  }
}

/**
 * [_split_and_view_by_series description]
 * @param  [type] $nodes [description]
 * @return [type]        [description]
 */
function _split_and_view_by_series($nodes) {
  $working = array_values($nodes);
  $terms = array();

  for($i = 0; $i < count($working); $i++) {

    // It's a required field
    $tid = $working[$i]->field_series['und'][0]['tid'];

    if (isset($terms[$tid]) &&
       ($tid !== $working[ $i - 1 ]->field_series['und'][0]['tid'])
       ) {
      $terms[$tid . '-' . $i][] = $working[$i];
      continue;
    }

    $terms[$tid][] = $working[$i];
  }

  $output = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('sermons-list'))
  );

  foreach ($terms as $tid_candidate => $sermons) {
    $tid = explode('-',$tid_candidate);
    $tid = reset($tid);

    $term = taxonomy_term_load($tid);
    $image = '';

    if (!empty($term->field_title_image)) {
      $title_image = array(
        'path'   => $term->field_title_image['und'][0]['uri'],
        'width'  => $term->field_title_image['und'][0]['width'],
        'height' => $term->field_title_image['und'][0]['height'],
        'alt'    => $term->name,
        'title'  => $term->name,
        'attributes' => array(),
      );
    }

    if (!empty($term->field_image)) {
      $bg_image = $term->field_image['und'][0]['uri'];
    }

    $sermons_viewed = entity_view('node', $sermons, 'teaser');

    $output[$tid_candidate] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('series-list', drupal_html_class($term->name)),
      ),

      'series-image' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('series-image')),
      ),

      'sermons' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('sermons-by-series')),
        'sermons' => $sermons_viewed,
      )
    );

    if (!empty($title_image)) {
      $output[$tid_candidate]['series-image']['image']['#markup'] = theme('image', $title_image);
    }

    if (!empty($bg_image)) {
      $output[$tid_candidate]['series-image']['#attributes']['style'] =
        'background-image: url(' . file_create_url($bg_image) . ');';
    }
  }

  return $output;
}

/**
 * Construct an itunes feed.
 * @return [type] [description]
 */
function portico_feed($service = 'morning') {
  $output = '';
  $sermons = portico_structure_get_sermons(FALSE, $service);

  $channel_data = array(
    'title' => 'Portico Arlington',
    'link' => 'http://www.porticoarlington.org',
    'language' => 'en-us',
    'copyright' => '&#x2117; &amp; &#xA9; 2016 Portico Church Arlington',
    'description' => 'Portico Arlington Podcasts',
    'itunes:image href="' . portico_structure_get_feed_photo() . '"' => 'self_close',
    'itunes:subtitle' => 'Sunday Message audio from Portico Arlington',
    'itunes:author' => 'Portico Arlington',
    'itunes:summary' => 'Portico Arlington Podcasts',
    'itunes:explicit' => 'no',
    'itunes:keywords' => 'Jesus,Arlington,Portico,christianity,church,gospel,sermon,Christ',
    'itunes:owner' => array(
      'itunes:name' => 'Portico Arlington',
      'itunes:email' => 'jreeve@porticoarlington.org',
    ),
    'itunes:category text="Religion &amp; Spirituality"' => array(
      'itunes:category text="Christianity"' => 'self_close',
    ),
  );

  $output .= '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= '<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">';
    $output .= '<channel>';

      $output .= '<atom:link href="http://porticoarlington.org/sermon-feed" rel="self" type="application/rss+xml" />';

      $output .= portico_rss_tag_generate($channel_data);
      $output .= portico_rss_format_sermons($sermons);

    $output .= '</channel>';
  $output .= '</rss>';

  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');

  print $output;
}

/**
 * [portico_rss_tag_generate description]
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function portico_rss_tag_generate($data) {
  $output = '';

  foreach ($data as $tag => $value) {

    if ($value == 'self_close') {
      $output .= '<' . $tag . "/>";
      continue;
    }

    $output .= '<' . $tag . ">";

    if (is_array($value)) {
      $output .= portico_rss_tag_generate($value);
    } else {
      $output .= $value;
    }

    $endtag = explode(' ', $tag);
    $endtag = reset($endtag);

    $output .= '</' . $endtag . '>';
  }
  return $output;
}


/**
 * [portico_structure_get_sermons description]
 * @return [type] [description]
 */
function portico_structure_get_sermons($pager = TRUE, $service = 'morning') {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', 'series')
        ->fieldCondition('field_service', 'value', $service, '=');

  $result = $query->execute();

  if (empty($result['taxonomy_term'])) {
    return FALSE;
  }

  $result = array_keys($result['taxonomy_term']);

  $node_query = new EntityFieldQuery();
  $node_query->entityCondition('entity_type', 'node')
             ->entityCondition('bundle', 'sermon')
             ->fieldCondition('field_series', 'tid', $result, 'IN')
             ->fieldOrderBy('field_date', 'value', 'DESC')
             ->propertyCondition('status', NODE_PUBLISHED)
             ->addTag('portico_structure_sermons');

  if ($pager) {
    $node_query->pager(10,0);
  } else {
    $node_query->range(0, 20);
  }

  $node_results = $node_query->execute();

  if (empty($node_results['node'])) {
    return FALSE;
  }

  $nodes = entity_load('node', array_keys($node_results['node']));
  return $nodes;
}

/**
 * [portico_rss_format_sermons description]
 * @param  [type] $sermons [description]
 * @return [type]          [description]
 */
function portico_rss_format_sermons($sermons)  {
  // global $base_path;
  require_once('sites/all/libraries/getID3/getid3/getid3.php');

  $output = '';
  if (empty($sermons)) {
    return $output;
  }

  $getID3 = new getID3;

  foreach ($sermons as $sermon) {
    $file = $sermon->field_audio['und'][0];
    $path = drupal_realpath($file['uri']);
    $url = file_create_url($file['uri']);
    $url = str_replace(' ', '%20', $url);
    $file_info = $getID3->analyze($path);

    $guid = 'sermon' . '-' . $sermon->nid;
    $pubDate = date('r', $sermon->field_date['und'][0]['value']);
    $summary = empty($sermon->field_description) ? '' : $sermon->field_description['und'][0]['safe_value'];

    $sermon_data = array(
      'item' => array(
        'title' => '<![CDATA[' . $sermon->title . ']]>',
        'guid isPermaLink="false"' => $guid,
        'pubDate' => $pubDate,
        'itunes:author' => 'Portico Arlington',
        'itunes:subtitle' => '',
        'itunes:summary' => empty($summary) ? '' : '<![CDATA[' . $summary . ']]>',
        'itunes:duration' => $file_info['playtime_string'],
        'itunes:image href="' . portico_structure_get_feed_photo() . '"' => 'self_close',
        'enclosure url="' . $url . '" length="' . $file_info['filesize'] . '" type="' . $file_info['mime_type'] . '"' => 'self_close',
      ),
    );

    $output .= portico_rss_tag_generate($sermon_data);
  }

  return $output;
}

/**
 * [portico_structure_get_feed_photo description]
 * @return [type] [description]
 */
function portico_structure_get_feed_photo() {
  return 'http://porticoarlington.org/sites/all/themes/portico/assets/images/portico-feed.jpg';
}
