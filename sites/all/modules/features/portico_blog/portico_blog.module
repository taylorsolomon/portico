<?php
/**
 * @file
 * Code for the Portico Blog feature.
 */

include_once 'portico_blog.features.inc';
include_once 'includes/portico_blog.block.inc';

/**
 * [portico_blog_subtype_options_alter description]
 * @param  [type] &$options   [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function portico_blog_subtype_options_alter(&$options, $form_state) {
  if ($form_state['bundle'] == 'page') {
    $options['blog'] = t('Blog Landing Page');
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function portico_blog_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['blog_teaser'] = array(
    'label' => t('Blog Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_view_alter
 * @param  [type] &$build [description]
 * @param  [type] $type   [description]
 * @return [type]         [description]
 */
function portico_blog_entity_view_alter(&$build, $type) {
  switch ($type) {
    case 'node':
      switch ($build['#bundle']) {
        case 'page':
          if ($subtype = field_get_items('node', $build['#node'], 'field_subtype')) {
            $subtype = reset($subtype);
            if ($subtype['value'] == 'blog') {
              portico_blog_add_blogposts($build);
            }
          }
          break;
      }
      break;
  }
}

/**
 * [portico_blog_bg_alter description]
 * @param  [type] &$style_name [description]
 * @param  [type] $entity      [description]
 * @return [type]              [description]
 */
function portico_blog_bg_alter(&$style_name, $entity) {
  if (!empty($entity->type) && $entity->type == 'blogpost') {
    // $style_name = '1600-350';
  }
}

/**
 * [portico_blog_add_blogposts description]
 * @param  [type] &$build [description]
 * @return [type]         [description]
 */
function portico_blog_add_blogposts(&$build) {

  $build['blog_results'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('blog-results')),
    'nodes' => array(
      '#markup' => '<p class="no-results">No results</p>',
    ),
  );

  $limit = 10;
  $params = drupal_get_query_parameters();
  $offset = empty($params['page']) ? 0 : $limit * ($params['page']);

  $index = search_api_index_load('blog_index');
  $query = new SearchApiQuery($index);
  $query->range($offset, $limit);
  $query->sort('field_date', 'DESC');
  $result = $query->execute();

  if (empty($result['results'])) {
    return $build;
  }

  $pager = pager_default_initialize($result['result count'], $limit, 0);

  $results = array_column($result['results'], 'id');
  $loaded = entity_load('node', $results);
  $viewed = entity_view('node', $loaded, 'teaser');

  $build['blog_results']['nodes'] = $viewed;

  $build['blog_facets'] = array(
    '#prefix' => '<div class=\'filter-bar\'><span>Filter</span></div>',
    '#type' => 'container',
    '#attributes' => array('class' => array('blog-facets-wrapper')),
    '#weight' => -1,
    'inner' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('blog-facets')),
      'date' => array('#markup' => portico_blog_facet_dates()),
      'category' => portico_blog_facet_categories(),
    ),
  );

  $build['pager']['#markup'] = theme('pager');
}

/**
 * [portico_blog_facet_categories description]
 * @return [type] [description]
 */
function portico_blog_facet_categories() {
  $vocab = taxonomy_vocabulary_machine_name_load('blogpost_category');
  $tree = taxonomy_get_tree($vocab->vid);

  $blog = portico_structure_get_subtype('blog');
  $path = drupal_get_path_alias('node/' . $blog->nid);

  $items = array();
  foreach ($tree as $term) {

    $options = array(
      'query' => array(
        'f' => array(
          'field_category:'.$term->tid,
        ),
      ),
    );

    $items[] = l($term->name, $path, $options);
  }

  $categories_array = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#prefix' => "<div class='facet-wrapper category'>",
    '#suffix' => "</div>",
  );
  return $categories_array;
}

/**
 * [portico_blog_archives description]
 *
 * @return [type] [description]
 */
function portico_blog_facet_dates() {
  // $output = &drupal_static(__FUNCTION__);
  // if (isset($output)) {
  //   return portico_blog_archive_theme($output);
  // }
  //
  // // Get the available results from the cache table.
  // if ($cache = cache_get('portico_blog_archives')) {
  //   return portico_blog_archive_theme($cache->data);
  // }

  // Get the first blog node ever created.
  $output = array();
  $entity = portico_blog_query('blogpost', NODE_PUBLISHED, FALSE)
    ->fieldOrderBy('field_date', 'value')
    ->range(0, 1);

  $first = $entity->execute();
  if (empty($first['node'])) {
    return $output;
  }

  // Load the first entity to get is field_date value.
  $entity = entity_load('node', array(key($first['node'])));
  $wrapper = entity_metadata_wrapper('node', reset($entity));

  // Use the field_date value as a start date to work up to today.
  $first_year = format_date($wrapper->field_date->raw(), 'custom', 'Y');

  // Get an array of all 12 months.
  $months = range(1, 12);

  foreach (range($first_year, date('Y')) as $year) {
    // Get months that contain a node.
    $results = portico_blog_months($months, $year);
    if (empty($results)) {
      continue;
    }

    // Output the available months.
    $output[$year] = array(
      'data' => '<span>' . $year . '</span>',
      'children' => $results
    );
  }

  // Make sure we have years and months to work with.
  $output = array_filter($output);
  if (empty($output)) {
    return $output;
  }

  // Sort the items by Year DESC.
  krsort($output, SORT_REGULAR);

  // Set the cache.
  // cache_set('portico_blog_archives', $output, 'cache');

  return portico_blog_archive_theme($output);
}

/**
 * [portico_blog_months description]
 *
 * @param  [type] &$months [description]
 * @param  [type] $year    [description]
 *
 * @return [type]          [description]
 */
function portico_blog_months($months, $year) {
  // Get blog subtype.
  $subtype = portico_structure_get_subtype('blog');
  if (empty($subtype)) {
    return $months;
  }

  // Loop through all available months.
  foreach ($months as $key => $month) {
    $digit = $month;

    // Convert the month digit to human readable.
    $month = date('F', mktime(0, 0, 0, $month, 10));

    // The entire month.
    $start = strtotime($month . ' 01 ' . $year);
    $end = strtotime($month . ' 31 ' . $year);

    // Get all nodes witin the date range.
    $query = portico_blog_query('blogpost', NODE_PUBLISHED, FALSE);
    $query->fieldCondition('field_date', 'value', array($start, $end), 'BETWEEN');

    // Get the total number of nodes.
    $count = $query->count()->execute();
    if (empty($count)) {
      unset($months[$key]);
      continue;
    }

    $months[$key] = array(
      'month' => $month,
      'count' => $count,
      'path' => 'node/' . $subtype->nid,
      'query' => array(
        'f' => array('field_date:' . $year . '-' . $digit),
      ),
    );
  }

  return $months;
}

/**
 * [portico_blog_archive_theme description]
 *
 * @param  [type] $options [description]
 *
 * @return [type]          [description]
 */
function portico_blog_archive_theme($options) {
  // Build each url and allow for on the fly alterations.
  foreach ($options as &$year) {
    foreach ($year['children'] as $key => $month) {

      // Add query parameters.
      $query = empty($month['query']) ? array()
        : array('query' => $month['query']);

      // Build link.
      $title = $month['month'] . ' (' . $month['count'] . ')';
      $year['children'][$key] = l($title, $month['path'], $query);
    }
  }

  $output = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('facet-wrapper', 'dates')),
    'items' => array(
      '#theme' => 'item_list',
      '#items' => $options
    )
  );
  return render($output);
  // return theme('item_list', array('items' => $options));
}

/**
 * Execute and EntityFieldQuery.
 *
 * @param string $entity_type.
 *   The entity type being queried.
 * @param string $bundle.
 *   The bundle to filter by.
 * @param boolean $status.
 *   The published or unpublished state.
 *
 * @return NULL || object.
 */
function portico_blog_query($bundle, $status = NODE_PUBLISHED, $execute = TRUE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  // Apply status to nodes so we do not return unpublished items.
  $query->propertyCondition('status', $status);

  // Allow for another function to execute this query.
  if (empty($execute)) {
    return $query;
  }

  $results = $query->execute();
  if (empty($results)) {
    return array();
  }

  $ids = array_keys($results[$entity_type]);
  return entity_load($entity_type, $ids);
}

// Array_column
if (!function_exists('array_column')) {
  /**
   * Returns the values from a single column of the input array, identified by
   * the $columnKey.
   *
   * Optionally, you may provide an $indexKey to index the values in the returned
   * array by the values from the $indexKey column in the input array.
   *
   * @param array $input A multi-dimensional array (record set) from which to pull
   *                     a column of values.
   * @param mixed $columnKey The column of values to return. This value may be the
   *                         integer key of the column you wish to retrieve, or it
   *                         may be the string key name for an associative array.
   * @param mixed $indexKey (Optional.) The column to use as the index/keys for
   *                        the returned array. This value may be the integer key
   *                        of the column, or it may be the string key name.
   * @return array
   */
  function array_column($input = null, $columnKey = null, $indexKey = null) {
    // Using func_get_args() in order to check for proper number of
    // parameters and trigger errors exactly as the built-in array_column()
    // does in PHP 5.5.
    $argc = func_num_args();
    $params = func_get_args();
    if ($argc < 2) {
      trigger_error("array_column() expects at least 2 parameters, {$argc} given", E_USER_WARNING);
      return NULL;
    }
    if (!is_array($params[0])) {
      trigger_error(
          'array_column() expects parameter 1 to be array, ' . gettype($params[0]) . ' given',
          E_USER_WARNING
      );
      return NULL;
    }
    if (!is_int($params[1])
        && !is_float($params[1])
        && !is_string($params[1])
        && $params[1] !== NULL
        && !(is_object($params[1]) && method_exists($params[1], '__toString'))
    ) {
      trigger_error('array_column(): The column key should be either a string or an integer', E_USER_WARNING);
      return FALSE;
    }
    if (isset($params[2])
        && !is_int($params[2])
        && !is_float($params[2])
        && !is_string($params[2])
        && !(is_object($params[2]) && method_exists($params[2], '__toString'))
    ) {
      trigger_error('array_column(): The index key should be either a string or an integer', E_USER_WARNING);
      return FALSE;
    }
    $paramsInput = $params[0];
    $paramsColumnKey = ($params[1] !== NULL) ? (string) $params[1] : NULL;
    $paramsIndexKey = NULL;
    if (isset($params[2])) {
      if (is_float($params[2]) || is_int($params[2])) {
        $paramsIndexKey = (int) $params[2];
      }
      else {
        $paramsIndexKey = (string) $params[2];
      }
    }
    $resultArray = array();
    foreach ($paramsInput as $row) {
      $key = $value = NULL;
      $keySet = $valueSet = FALSE;
      if ($paramsIndexKey !== NULL && array_key_exists($paramsIndexKey, $row)) {
        $keySet = TRUE;
        $key = (string) $row[$paramsIndexKey];
      }
      if ($paramsColumnKey === NULL) {
        $valueSet = TRUE;
        $value = $row;
      }
      elseif (is_array($row) && array_key_exists($paramsColumnKey, $row)) {
        $valueSet = TRUE;
        $value = $row[$paramsColumnKey];
      }
      if ($valueSet) {
        if ($keySet) {
          $resultArray[$key] = $value;
        }
        else {
          $resultArray[] = $value;
        }
      }
    }
    return $resultArray;
  }
}
